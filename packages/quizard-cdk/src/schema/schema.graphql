schema {
  query: Query
  mutation: Mutation
}

type Query {
  # quiz
  quizList(cond: KeyConditionExpression!, pagination: DDBPagination): QuizListResult!
  topicList: [String!]!

  # score
  scoreList(cond: KeyConditionExpression! indexConfig: ScoreIndexConfig!, pagination: DDBPagination!): ScoreListResult!
}

type Mutation {
  # quiz
  addQuiz(input: QuizInput!): Quiz! @deprecated
  populateQuizData: Int!

  # score
  addScore(input: ScoreInput!): Score!
}

# define it again for codegen
scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSPhone
scalar AWSURL
scalar AWSIPAddress

input DDBPagination {
  limit: Int!
  exclusiveStartKey: AWSJSON
}

# generic input to help shaping the query command
# more details at https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
# and https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html
input KeyValue {
  string: String
  float: Float
  int: Int
}

input KeyConditionExpression {
  pk: KeyValue!
  sk: SKConditionExpression
}

input SKConditionExpression {
  eq: KeyValue
  lt: KeyValue
  lte: KeyValue
  gt: KeyValue
  gte: KeyValue
  beginsWith: KeyValue
  between: SKBetweenConditionExpression
}

input SKBetweenConditionExpression {
  from: KeyValue!
  to: KeyValue!
}